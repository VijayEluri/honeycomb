package com.sun.dtf.actions.honeycomb;

import java.io.IOException;

import com.sun.dtf.actions.honeycomb.util.NVOAPool;
import com.sun.dtf.exception.DTFException;
import com.sun.dtf.exception.ParseException;
import com.sun.dtf.recorder.Event;
import com.sun.honeycomb.client.NameValueObjectArchive;
import com.sun.honeycomb.client.ObjectIdentifier;
import com.sun.honeycomb.client.QueryResultSet;
import com.sun.honeycomb.common.ArchiveException;

/**
 * @dtf.tag hcquery
 * 
 * @dtf.since 1.0
 * @dtf.author Rodney Gomes
 * 
 * @dtf.tag.desc 
 * 
 * @dtf.tag.example 
 * 
 */
public class Hcquery extends HCObjectOperation {

    /**
     * @dtf.attr resultsPerFetch
     * @dtf.attr.desc 
     */
    private String resultsPerFetch = "2000";
    
    public Hcquery() { }
    
    public void execute() throws DTFException {
        connectionSetup();
        
        NameValueObjectArchive nvoa = 
              NVOAPool.getNVOA(getDatavip(), new Integer(getPort()).intValue());
     
        try {
            Event event = createHCOpEvent(HCEventConstants.HC_QUERY_EVENT);
            QueryResultSet resultSet = null;
           
            Genmetadata gen = (Genmetadata)findFirstAction(Genmetadata.class);
            String query =  gen.genQueryStr(nvoa);

            try { 
                event.start();
                resultSet = nvoa.query(query,getResultsperfetch());
                event.stop();
               
                /*
                 * TODO: if we ever intend to have remote cursors the work will 
                 *       have to start from here for being able to process the 
                 *       cursors generated by remote hc_queries on other agents.
                 */
//                StringBuffer oids = new StringBuffer();
                int n = 0;
                while (resultSet.next()) { 
                    n++;
//                    oids.append(resultSet.getObjectIdentifier().toString());
//                    oids.append(",");
                }
    
                getLogger().info("HCQuery returned " + n + " result(s).");
//                event.addAttribute("result.oids", oids.toString());
                
                event.addAttribute("results",n);
                getRecorder().record(event);
            } catch (ArchiveException e) { 
                if (continueOnFailure()) { 
                    processFailure(ObjectIdentifier.ObjectIdentifierEOF, event, e);
                    getRecorder().record(event);
                } else 
                    throw e;
            } catch (IOException e) { 
                if (continueOnFailure()) { 
                    processFailure(ObjectIdentifier.ObjectIdentifierEOF, event, e);
                    getRecorder().record(event);
                } else 
                    throw e;
            }
        } catch (ArchiveException e) {
            throw new DTFException("Error retrieving eobject.", e);
        } catch (IOException e) {
            throw new DTFException("Error retrieving object.", e);
        }
    }
    
    public int getResultsperfetch() throws ParseException  { 
        return toInt("resultsPerFetch",resultsPerFetch);
    }
    
    public void setResultsperfetch(String resultsPerFetch) { 
        this.resultsPerFetch = resultsPerFetch; 
    }
}
