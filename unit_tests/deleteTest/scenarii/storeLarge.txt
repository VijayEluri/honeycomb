/*
 * Copyright © 2008, Sun Microsystems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *    * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 *    * Neither the name of Sun Microsystems, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



import com.sun.honeycomb.delete.Constants;

chunksize = com.sun.honeycomb.delete.Constants.MAX_CHUNK_SIZE;

// XXX this is just a subset of the simpleMultichunkNew for the
// smaller repro of bug 6398274

ECHO("store multichunk files or boundary sizes and do the various ops on it");
ECHO("chunksize is " + chunksize);
ECHO("repro for bug 6398274 oa unit test: attempt to check in a buffer that has already been checked in or was never checked out");

void storeMultichunkTest(int storesize) {
    ECHO("----> Store data and md obj for size " + storesize);
    STORE(1, storesize);
    DEREF(1, 0);
    REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 1);
    REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);

    ECHO("--> Retrieve data obj");
    RETRIEVE(0, true);
    ECHO("--> Retrieve md obj");
    RETRIEVE(1, true);

    ECHO("--> Add md obj");
    ADDM(1, 2);
    REFCNTCHECK(0, Constants.ALL_FRAGS, 2, 2);
    REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
    REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);
    FRAGISDELETED(0, Constants.ALL_FRAGS, false);
    FRAGISDELETED(1, Constants.ALL_FRAGS, false);
    FRAGISDELETED(2, Constants.ALL_FRAGS, false);

    ECHO("--> Delete orig md obj");
    DELETE(1, true);
    REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 2);
    REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
    REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);
    FRAGISDELETED(0, Constants.ALL_FRAGS, false);
    FRAGISDELETED(1, Constants.ALL_FRAGS, true);
    FRAGISDELETED(2, Constants.ALL_FRAGS, false);

    ECHO("--> Retrieve data obj");
    RETRIEVE(0, true);
    ECHO("--> Retrieve origmd obj--should fail");
    RETRIEVE(1, false);
    ECHO("--> Retrieve new md obj");
    RETRIEVE(2, true);

    ECHO("--> Delete second md obj");
    DELETE(2, true);
    REFCNTCHECK(0, Constants.ALL_FRAGS, 0, 2);
    REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
    REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);
    FRAGISDELETED(0, Constants.ALL_FRAGS, true);
    FRAGISDELETED(1, Constants.ALL_FRAGS, true);
    FRAGISDELETED(2, Constants.ALL_FRAGS, true);

    ECHO("--> Retrieve data obj--should fail");
    RETRIEVE(0, false);
    ECHO("--> Retrieve orig md obj--should fail");
    RETRIEVE(1, false);
    ECHO("--> Retrieve new md obj--should fail");
    RETRIEVE(2, false);
 }

storeMultichunkTest(chunksize * 20 - 1);
storeMultichunkTest(chunksize * 20 - 1);

