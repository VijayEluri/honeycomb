/*
 * Copyright © 2008, Sun Microsystems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *    * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 *    * Neither the name of Sun Microsystems, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



import com.sun.honeycomb.delete.Constants;
import com.sun.honeycomb.oa.OAClient;

ECHO("Tests how we handle recovery of deleted objects with multiple refs");
ECHO("Repro for bug 6397808: recovery doesn't set the refcount for multi-ref objects correctly when refs have been deleted");

chunksize = com.sun.honeycomb.delete.Constants.MAX_CHUNK_SIZE;
storesize = 3 * chunksize;

//
// Single Ref
//
ECHO("--> SingleRefTest: Store object of size " + storesize);
STORE(1, storesize);
DEREF(1,0);
REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 1);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);

// remove 1st chunk of frag 4 of the data object so OA can't find it
ECHO("--> Remove frag 4 of each object");
FRAGREMOVE(0, 4, 0);
FRAGREMOVE(1, 4, 0);


ECHO("--> Delete the object while frag 4 is missing...");
DELETE(1, true);
REFCNTCHECK(0, Constants.ALL_FRAGS, 0, 1);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);

ECHO("--> Recover frag 4 of data obj...");
RECOVER(0, 4, 0);
ECHO("--> Recover frag 4 of metadata obj...");
RECOVER(1, 4, 0);

ECHO("--> Check retrieve");
RETRIEVE(1, false);

ECHO("--> Verify refs are as expected");
REFCNTCHECK(0, Constants.ALL_FRAGS, 0, 1);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);

//
// Multi Ref
//
ECHO("--> MultiRefTest: Store object of size " + storesize);
STORE(1, storesize);
DEREF(1,0);
REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 1);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);

ECHO("--> Add MD");
ADDM(1, 2);
REFCNTCHECK(0, Constants.ALL_FRAGS, 2, 2);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);

// remove 1st chunk of frag 4 of the data object so OA can't find it
ECHO("--> Remove frag 4 of each object");
FRAGREMOVE(0, 4, 0);
FRAGREMOVE(1, 4, 0);
FRAGREMOVE(2, 4, 0);

ECHO("--> Recover frag 4 of data obj...");
RECOVER(0, 4, 0);
ECHO("--> Recover frag 4 of metadata obj...");
RECOVER(1, 4, 0);
ECHO("--> Recover frag 4 of second metadata obj...");
RECOVER(2, 4, 0);

// make sure basic multi-ref recovery works first
REFCNTCHECK(0, Constants.ALL_FRAGS, 2, 2);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);


// remove 1st chunk of frag 4 of the data object so OA can't find it
ECHO("--> Remove frag 4 of each object again");
FRAGREMOVE(0, 4, 0);
FRAGREMOVE(1, 4, 0);
FRAGREMOVE(2, 4, 0);


ECHO("--> Delete the object while frag 4 is missing...");
DELETE(1, true);
REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 2);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);

ECHO("--> Recover frag 4 of data obj...");
RECOVER(0, 4, 0);
ECHO("--> Recover frag 4 of metadata obj...");
RECOVER(1, 4, 0);
ECHO("--> Recover frag 4 of second metadata obj...");
RECOVER(2, 4, 0);

ECHO("--> Check retrieve");
RETRIEVE(1, false);
RETRIEVE(2, true);

ECHO("--> Verify refs are as expected");
REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 2);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);

