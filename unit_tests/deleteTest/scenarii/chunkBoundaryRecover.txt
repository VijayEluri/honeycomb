/*
 * Copyright © 2008, Sun Microsystems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *    * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 *    * Neither the name of Sun Microsystems, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



import com.sun.honeycomb.delete.Constants;
import com.sun.honeycomb.oa.OAClient;
import com.sun.honeycomb.oa.FragmentFooter;


ECHO("Repro for bug 6376038: we don't correctly recover the last chunk of multichunk files that are size n*CHUNKSIZE");
ECHO("Store 3-chunk object that is exactly 3 chunks long and recover last chunk of it");

OAClient oac = OAClient.getInstance();

chunksize = Constants.MAX_CHUNK_SIZE = oac.blockSize;
oac.setMaxChunkSize(Constants.MAX_CHUNK_SIZE);
storesize = chunksize * 3;
// Hm, this math isn't easy...maybe because the checksum blocks???
// Hard code for now...
fragMaxSize = 65980;
//fragMaxSize = (chunksize / Constants.reliability.getDataFragCount()) + FragmentFooter.SIZE;

System.out.println("chunksize " + chunksize + "; storesize " + storesize + "; fragMaxSize " + fragMaxSize);

ECHO("--> Store multiChunk object w/ chunkSize = blockSize...");
STORE(1, storesize);
DEREF(1,0);

ECHO("--> Before removing it, verify expected size of frag 4 of last chunk");
FRAGFILESIZE(0, fragMaxSize, 4, 2);

ECHO("--> Before removing it, verify expected internal size of frag 4 of last chunk");
FRAGINTERNALSIZE(0, storesize, 4, 2);

ECHO("--> Remove last chunk of frag 4 of it...");
FRAGREMOVE(0, 4, 2);

ECHO("--> Recover last chunk of frag 4 of it...");
RECOVER(0, 4, 2);

ECHO("--> Verify expected filesize of recovered last chunk");
FRAGFILESIZE(0, fragMaxSize, 4, 2);

ECHO("--> Verify expected internal size of recovered last chunk");
FRAGINTERNALSIZE(0, storesize, 4, 2);

ECHO("Success.");
