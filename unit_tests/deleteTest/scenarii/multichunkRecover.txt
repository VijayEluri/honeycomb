/*
 * Copyright © 2008, Sun Microsystems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *    * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 *    * Neither the name of Sun Microsystems, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



import com.sun.honeycomb.delete.Constants;
import com.sun.honeycomb.oa.OAClient;



ECHO("Tests that store a 3-chunk large object, and then for the 1st, 2nd, and last chunks, remove a fragment, recover the fragment, then confirm all fragments are there.");

ECHO ("Tests run for small (blockSize), medium (2*blockSize), and large (3*blockSize) sized chunks, and then a final test for 2*blockSize-sized chunks and a small object (2100200 bytes) of 2 chunks that caught an earlier bug where we were using chunkSize instead of blockSize.");

OAClient oac = OAClient.getInstance();


chunksize = Constants.MAX_CHUNK_SIZE = oac.blockSize;
oac.setMaxChunkSize(Constants.MAX_CHUNK_SIZE);
storesize = chunksize * 3 + 1;

System.out.println(chunksize + " " + storesize);

ECHO("--> Store multiChunk object w/ chunkSize = blockSize...");
STORE(1, storesize);
DEREF(1,0);
REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 1);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);

ECHO("--> Retrieve it...");
// RETRIEVE(0, true);
RETRIEVE(0, (long)(chunksize*2)+1, (long)storesize - ((chunksize*2)+1), true);

// remove 1st chunk of frag 4 of the data object so OA can't find it
ECHO("--> Remove 1st chunk of frag 4 of it...");
FRAGREMOVE(0, 4, 0);

// recover 1st chunk of frag 4 of the data object
ECHO("--> Recover 1st chunk of frag 4 of it...");
RECOVER(0, 4, 0);

// ECHO("-->Verify 1st chunk of frag 4 is there now...");
FRAGNOTZERO(0, 4, 0);

ECHO("--> Retrieve the object using the new fragment...");
RETRIEVE(0, true);

// remove 2nd chunk of frag 4 of the data object so OA can't find it
ECHO("--> Remove 2nd chunk of frag 4 of it...");
FRAGREMOVE(0, 4, 1);

// recover 2nd chunk of frag 4 of the data object
ECHO("--> Recover 2nd chunk of frag 4 of it...");
RECOVER(0, 4, 1);

// ECHO("-->Verify 2nd chunk of frag 4 is there now...");
FRAGNOTZERO(0, 4, 1);

ECHO("--> Retrieve the object using the new fragment...");
RETRIEVE(0, true);

// remove last chunk of frag 4 of the data object so OA can't find it
ECHO("--> Remove last chunk of frag 4 of it...");
FRAGREMOVE(0, 4, 2);

// recover 1st chunk of frag 4 of the data object
ECHO("--> Recover frag 4 of it...");
RECOVER(0, 4, 2);

// ECHO("-->Verify frag 4 is there now...");
FRAGNOTZERO(0, 4, 2);

ECHO("--> Retrieve the object using the new fragment...");
RETRIEVE(0, true);
	
chunksize = Constants.MAX_CHUNK_SIZE = oac.blockSize*2;
oac.setMaxChunkSize(Constants.MAX_CHUNK_SIZE);
storesize = chunksize * 3 + 1;

System.out.println("chunksize " + chunksize + " storesize " + storesize);

ECHO("Store a multiChunk object, remove a fragment, recover the fragment, then confirm all fragments are there.");

ECHO("--> Store multiChunk object with chunkSize == blockSize*2...");
STORE(1, storesize);
DEREF(1,0);
REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 1);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);

ECHO("--> Retrieve it...");
// RETRIEVE(0, true);
RETRIEVE(0, (long)(chunksize*2)+1, (long)storesize - ((chunksize*2)+1), true);

// remove 1st chunk of frag 4 of the data object so OA can't find it
ECHO("--> Remove 1st chunk of frag 4 of it...");
FRAGREMOVE(0, 4, 0);

// recover 1st chunk of frag 4 of the data object
ECHO("--> Recover 1st chunk of frag 4 of it...");
RECOVER(0, 4, 0);

// ECHO("-->Verify 1st chunk of frag 4 is there now...");
FRAGNOTZERO(0, 4, 0);

ECHO("--> Retrieve the object using the new fragment...");
RETRIEVE(0, true);

// remove 2nd chunk of frag 4 of the data object so OA can't find it
ECHO("--> Remove 2nd chunk of frag 4 of it...");
FRAGREMOVE(0, 4, 1);

// recover 2nd chunk of frag 4 of the data object
ECHO("--> Recover 2nd chunk of frag 4 of it...");
RECOVER(0, 4, 1);

// ECHO("-->Verify 2nd chunk of frag 4 is there now...");
FRAGNOTZERO(0, 4, 1);

ECHO("--> Retrieve the object using the new fragment...");
RETRIEVE(0, true);

// remove last chunk of frag 4 of the data object so OA can't find it
ECHO("--> Remove last chunk of frag 4 of it...");
FRAGREMOVE(0, 4, 2);

// recover 1st chunk of frag 4 of the data object
ECHO("--> Recover frag 4 of it...");
RECOVER(0, 4, 2);

// ECHO("-->Verify frag 4 is there now...");
FRAGNOTZERO(0, 4, 2);

ECHO("--> Retrieve the object using the new fragment...");
RETRIEVE(0, true);

ECHO("Success.");


chunksize = Constants.MAX_CHUNK_SIZE = oac.blockSize*5;
oac.setMaxChunkSize(Constants.MAX_CHUNK_SIZE);
storesize = chunksize * 3 + 1;

System.out.println("chunksize " + chunksize + " storesize " + storesize);

ECHO("Store a multiChunk object, remove a fragment, recover the fragment, then confirm all fragments are there.");

ECHO("--> Store multiChunk object with chunkSize = blockSize*5...");
STORE(1, storesize);
DEREF(1,0);
REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 1);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);

ECHO("Retrieve by metadata OID");
RETRIEVE(1, true);
System.exit(0);

ECHO("--> Retrieve it...");
// RETRIEVE(0, true);
RETRIEVE(0, (long)(chunksize*2)+1, (long)storesize - ((chunksize*2)+1), true);

// remove 1st chunk of frag 4 of the data object so OA can't find it
ECHO("--> Remove 1st chunk of frag 4 of it...");
FRAGREMOVE(0, 4, 0);

// recover 1st chunk of frag 4 of the data object
ECHO("--> Recover 1st chunk of frag 4 of it...");
RECOVER(0, 4, 0);

// ECHO("-->Verify 1st chunk of frag 4 is there now...");
FRAGNOTZERO(0, 4, 0);

ECHO("--> Retrieve the object using the new fragment...");
RETRIEVE(0, true);

// remove 2nd chunk of frag 4 of the data object so OA can't find it
ECHO("--> Remove 2nd chunk of frag 4 of it...");
FRAGREMOVE(0, 4, 1);

// recover 2nd chunk of frag 4 of the data object
ECHO("--> Recover 2nd chunk of frag 4 of it...");
RECOVER(0, 4, 1);

// ECHO("-->Verify 2nd chunk of frag 4 is there now...");
FRAGNOTZERO(0, 4, 1);

ECHO("--> Retrieve the object using the new fragment...");
RETRIEVE(0, true);

// remove last chunk of frag 4 of the data object so OA can't find it
ECHO("--> Remove last chunk of frag 4 of it...");
FRAGREMOVE(0, 4, 2);

// recover 1st chunk of frag 4 of the data object
ECHO("--> Recover frag 4 of it...");
RECOVER(0, 4, 2);

// ECHO("-->Verify frag 4 is there now...");
FRAGNOTZERO(0, 4, 2);

ECHO("--> Retrieve the object using the new fragment...");
RETRIEVE(0, true);

ECHO("Success.");



chunksize = Constants.MAX_CHUNK_SIZE = oac.blockSize*5;
oac.setMaxChunkSize(Constants.MAX_CHUNK_SIZE);
storesize = 2100200;
chunks = storesize/chunksize;
System.out.println("chunksize " + chunksize + " storesize " + storesize + " chunks " + chunks);

ECHO("Store a large multiChunk object, remove a fragment, recover the fragment, then confirm all fragments are there.");

ECHO("--> Store multiChunk object with size 2100200 and chunkSize = blockSize*5...");
STORE(1, storesize);
DEREF(1,0);
REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 1);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);

ECHO("--> Retrieve it...");
// RETRIEVE(0, true);
RETRIEVE(0, (long)(chunksize*2)+1, (long)storesize - ((chunksize*2)+1), true);

// remove 1st chunk of frag 4 of the data object so OA can't find it
ECHO("--> Remove 1st chunk of frag 4 of it...");
FRAGREMOVE(0, 4, 0);

// recover 1st chunk of frag 4 of the data object
ECHO("--> Recover 1st chunk of frag 4 of it...");
RECOVER(0, 4, 0);

// ECHO("-->Verify 1st chunk of frag 4 is there now...");
FRAGNOTZERO(0, 4, 0);

ECHO("--> Retrieve the object using the new fragment...");
RETRIEVE(0, true);

// remove last chunk of frag 4 of the data object so OA can't find it
ECHO("--> Remove last chunk of frag 4 of it...");
FRAGREMOVE(0, 4, 1);

// recover 1st chunk of frag 4 of the data object
ECHO("--> Recover frag 4 of it...");
RECOVER(0, 4, 1);

// ECHO("-->Verify frag 4 is there now...");
FRAGNOTZERO(0, 4, 1);

ECHO("--> Retrieve the object using the new fragment...");
RETRIEVE(0, true);

ECHO("Success.");
