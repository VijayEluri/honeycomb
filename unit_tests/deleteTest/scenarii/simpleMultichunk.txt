/*
 * Copyright © 2008, Sun Microsystems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *    * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 *    * Neither the name of Sun Microsystems, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



import com.sun.honeycomb.delete.Constants;

chunksize = com.sun.honeycomb.delete.Constants.MAX_CHUNK_SIZE;

// test for bug 6384514: add md and delete fail for object multiple of CHUNK size
storesize = chunksize;

ECHO("store multichunk file of size " + storesize + " and do the various ops on it");

ECHO("--> Store data and md obj");
STORE(1, storesize);
DEREF(1, 0);
REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 1);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);

ECHO("--> Retrieve data obj");
RETRIEVE(0, true);

ECHO("--> Retrieve md obj");
RETRIEVE(1, true);

ECHO("--> Add md obj");
ADDM(1, 2);
REFCNTCHECK(0, Constants.ALL_FRAGS, 2, 2);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);
FRAGISDELETED(0, Constants.ALL_FRAGS, false);
FRAGISDELETED(1, Constants.ALL_FRAGS, false);
FRAGISDELETED(2, Constants.ALL_FRAGS, false);

ECHO("--> Delete orig md obj");
DELETE(1, true);
REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 2);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);
FRAGISDELETED(0, Constants.ALL_FRAGS, false);
FRAGISDELETED(1, Constants.ALL_FRAGS, true);
FRAGISDELETED(2, Constants.ALL_FRAGS, false);

ECHO("--> Delete second md obj");
DELETE(2, true);
REFCNTCHECK(0, Constants.ALL_FRAGS, 0, 2);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);
FRAGISDELETED(0, Constants.ALL_FRAGS, true);
FRAGISDELETED(1, Constants.ALL_FRAGS, true);
FRAGISDELETED(2, Constants.ALL_FRAGS, true);

// test for bug 6384514: add md and delete fail for object multiple of CHUNK size - this tests first fix that had a problem with it
storesize = 2*chunksize + 1;

ECHO("store multichunk file of size " + storesize + " and do the various ops on it");

ECHO("--> Store data and md obj");
STORE(1, storesize);
DEREF(1, 0);
REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 1);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);

ECHO("--> Retrieve data obj");
RETRIEVE(0, true);

ECHO("--> Retrieve md obj");
RETRIEVE(1, true);

ECHO("--> Add md obj");
ADDM(1, 2);
REFCNTCHECK(0, Constants.ALL_FRAGS, 2, 2);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);
FRAGISDELETED(0, Constants.ALL_FRAGS, false);
FRAGISDELETED(1, Constants.ALL_FRAGS, false);
FRAGISDELETED(2, Constants.ALL_FRAGS, false);

ECHO("--> Delete orig md obj");
DELETE(1, true);
REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 2);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);
FRAGISDELETED(0, Constants.ALL_FRAGS, false);
FRAGISDELETED(1, Constants.ALL_FRAGS, true);
FRAGISDELETED(2, Constants.ALL_FRAGS, false);

ECHO("--> Delete second md obj");
DELETE(2, true);
REFCNTCHECK(0, Constants.ALL_FRAGS, 0, 2);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);
FRAGISDELETED(0, Constants.ALL_FRAGS, true);
FRAGISDELETED(1, Constants.ALL_FRAGS, true);
FRAGISDELETED(2, Constants.ALL_FRAGS, true);

storesize = chunksize * 20 + 1;

ECHO("store multichunk file of size " + storesize + " and do the various ops on it");

ECHO("--> Store data and md obj");
STORE(1, storesize);
DEREF(1, 0);
REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 1);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);

ECHO("--> Retrieve data obj");
RETRIEVE(0, true);

ECHO("--> Retrieve md obj");
RETRIEVE(1, true);

ECHO("--> Add md obj");
ADDM(1, 2);
REFCNTCHECK(0, Constants.ALL_FRAGS, 2, 2);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);
FRAGISDELETED(0, Constants.ALL_FRAGS, false);
FRAGISDELETED(1, Constants.ALL_FRAGS, false);
FRAGISDELETED(2, Constants.ALL_FRAGS, false);

ECHO("--> Delete orig md obj");
DELETE(1, true);
REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 2);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);
FRAGISDELETED(0, Constants.ALL_FRAGS, false);
FRAGISDELETED(1, Constants.ALL_FRAGS, true);
FRAGISDELETED(2, Constants.ALL_FRAGS, false);

ECHO("--> Delete second md obj");
DELETE(2, true);
REFCNTCHECK(0, Constants.ALL_FRAGS, 0, 2);
REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
REFCNTCHECK(2, Constants.ALL_FRAGS, -1, -1);
FRAGISDELETED(0, Constants.ALL_FRAGS, true);
FRAGISDELETED(1, Constants.ALL_FRAGS, true);
FRAGISDELETED(2, Constants.ALL_FRAGS, true);


