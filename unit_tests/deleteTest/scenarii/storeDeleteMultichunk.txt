/*
 * Copyright © 2008, Sun Microsystems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *    * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 *    * Neither the name of Sun Microsystems, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



import com.sun.honeycomb.delete.Constants;

NB_FILES = 5;
chunksize = com.sun.honeycomb.delete.Constants.MAX_CHUNK_SIZE;

ECHO("store " + NB_FILES + " multichunk and then delete them all");
ECHO("regression of bug 6384514: can't add metadata or delete an object that is N*CHUNKSIZE (N>=1)");

ECHO("chunksize=" + chunksize);

void multichunkDelete(howManyChunks) {
    ECHO("----> Call store for " + howManyChunks + " chunks or " + (howManyChunks*chunksize) + " bytes +/- 0 or 1 byte");

    // the chunk boundary case
    STORE(1, chunksize * howManyChunks);
    DEREF(1, 0);
    REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 1);

    // the +1 case
    STORE(3, chunksize * howManyChunks + 1);
    DEREF(3, 2);
    REFCNTCHECK(2, Constants.ALL_FRAGS, 1, 1);
    
    // do the -1 case if non-zero
    if (howManyChunks > 0) {
        STORE(5, chunksize * howManyChunks - 1);
        DEREF(5, 4);
        REFCNTCHECK(4, Constants.ALL_FRAGS, 1, 1);
    }
        
    ECHO("--> Retrieve the objects (data and md)");
    RETRIEVE(0, true);
    RETRIEVE(1, true);
    RETRIEVE(2, true);
    RETRIEVE(3, true);
    if (howManyChunks > 0) {
        RETRIEVE(4, true);
        RETRIEVE(5, true);
    }

    ECHO("--> Delete the MD objs and verify all frags got deleted");
    DELETE(1, true);
    FRAGISDELETED(0, Constants.ALL_FRAGS, true);
    FRAGISDELETED(1, Constants.ALL_FRAGS, true);
    REFCNTCHECK(0, Constants.ALL_FRAGS, 0, 1);
    DELETE(3, true);
    FRAGISDELETED(2, Constants.ALL_FRAGS, true);
    FRAGISDELETED(3, Constants.ALL_FRAGS, true);
    REFCNTCHECK(2, Constants.ALL_FRAGS, 0, 1);
    if (howManyChunks > 0) {
        DELETE(5, true);
        FRAGISDELETED(4, Constants.ALL_FRAGS, true);
        FRAGISDELETED(5, Constants.ALL_FRAGS, true);
        REFCNTCHECK(4, Constants.ALL_FRAGS, 0, 1);
    }
}

for (int j = 0; j < NB_FILES; j++) {
    multichunkDelete(j);
}
