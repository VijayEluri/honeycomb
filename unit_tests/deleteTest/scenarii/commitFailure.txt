/*
 * Copyright © 2008, Sun Microsystems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *    * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 *    * Neither the name of Sun Microsystems, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



import com.sun.honeycomb.delete.Constants;
import com.sun.honeycomb.oa.OAClient;
import com.sun.honeycomb.oa.FragmentFaultEvent;
import com.sun.honeycomb.oa.FragmentFault;
import com.sun.honeycomb.oa.daal.nfs.FaultyNfsDAAL;

ECHO("Tests that if enough renames fail, we abort the store and return failure");

OAClient oac = OAClient.getInstance();

chunksize = Constants.MAX_CHUNK_SIZE = oac.blockSize;
oac.setMaxChunkSize(Constants.MAX_CHUNK_SIZE);
storesize = chunksize * 3 + 1;

new bsh.Interpreter().source(System.getProperty("deletefmk.script.dir") +
                             File.separatorChar + "utils" + File.separatorChar +
                             "faultUtils.java", this.namespace);

/**********************************************************************/
void storeAndRetrive(OAClient oac, boolean fail) {
    if (fail) {
        STORE(1, storesize, false);
    } else {
        STORE(1, storesize, true);
        DEREF(1,0);
        REFCNTCHECK(0, Constants.ALL_FRAGS, 1, 1);
        REFCNTCHECK(1, Constants.ALL_FRAGS, -1, -1);
        RETRIEVE(1, true);
    }
}

/**********************************************************************/
ECHO("--> Store multiChunk object w/ chunkSize = blockSize and 1 rename fail...");
Collection faults = addFragmentFaultAllChunks("fault(rename)",
                                              FragmentFaultEvent.STORE,
                                              FaultyNfsDAAL.COMMIT,
                                              FragmentFault.IO_ERROR,
                                              1, 4,
                                              OAClient.OBJECT_TYPE_DATA);
storeAndRetrive(oac, false);
assertTriggered(faults);
resetFaults(FaultyNfsDAAL.COMMIT.toString());

/**********************************************************************/
ECHO("--> Store multiChunk object w/ chunkSize = blockSize and 2 rename fail...");
faults.addAll(addFragmentFaultAllChunks("fault(rename)",
                                        FragmentFaultEvent.STORE,
                                        FaultyNfsDAAL.COMMIT,
                                        FragmentFault.IO_ERROR,
                                        2, 4,
                                        OAClient.OBJECT_TYPE_DATA));
storeAndRetrive(oac, false);
assertTriggered(faults);
resetFaults(FaultyNfsDAAL.COMMIT.toString());

/**********************************************************************/
ECHO("--> Store multiChunk object w/ chunkSize = blockSize and 3 rename fail...");
faults.addAll(addFragmentFaultAllChunks("fault(rename)",
                                        FragmentFaultEvent.STORE,
                                        FaultyNfsDAAL.COMMIT,
                                        FragmentFault.IO_ERROR,
                                        3, 4,
                                        OAClient.OBJECT_TYPE_DATA));
storeAndRetrive(oac, true);
assertMinTriggered(faults, 3);
removeAllFaults();

/**********************************************************************/
ECHO("--> Store multiChunk object w/ chunkSize = blockSize and all renames fail...");
faults = addFragmentFaultAllChunksAllFragments("fault(rename)",
                                               FragmentFaultEvent.STORE,
                                               FaultyNfsDAAL.COMMIT,
                                               FragmentFault.IO_ERROR,
                                               4,
                                               OAClient.OBJECT_TYPE_DATA);
storeAndRetrive(oac, true);
assertMinTriggered(faults, 3);
removeAllFaults();
ECHO("Success.");
