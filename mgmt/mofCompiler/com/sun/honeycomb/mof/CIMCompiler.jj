/*
 * Copyright © 2008, Sun Microsystems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *    * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 *    * Neither the name of Sun Microsystems, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 4;
  OTHER_AMBIGUITY_CHECK = 2;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT = true;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(CIMCompiler)

package com.sun.honeycomb.mof;

import java.util.Vector;
import javax.wbem.cim.*;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.File;

public class CIMCompiler {

    public static final String COMMON_JAVA_HEADER = "/*\n"+
        " * This file has been automatically generated by the honeycomb CIMCompiler.\n"+
        " * DO NO EDIT !!!\n"+
        " *\n"+
        " * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.\n"+
        " * Use is subject to license terms.\n"+
        " */\n\n";

    public static final String STD_TYPE_IMPORTS = 
        "import java.math.BigInteger;\n"+
        "import java.util.List;\n";
    
    private CompilerBackend comp;

    private static void usage(String msg) {
        if (msg != null) {
            System.out.println("Error: "+msg+"\n");
        }
        System.out.println("Parameters: mofFile\n"+
                           "\t- mofFile is the mof file to parse");
        System.exit(1);
    }

    public static void main(String[] arg) {
        if (arg.length != 1) {
            usage("Bad number of arguments ["+
                  arg.length+"]");
        }
        File file = new File(arg[0]);
        if (!file.exists()) {
            usage("The file "+
                  file.getAbsolutePath()+" does not exist)");
        }
        if (!file.canRead()) {
            usage("Doesn't have permissions to read "+
                  file.getAbsolutePath());
        }
        if (System.getProperty("outputDir") == null) {
            usage("outputDir has to be specified in the system properties");
        }
        if (System.getProperty("clientXsdFile") == null) {
            usage("clientXsdFile has to be specified in the system properties");
        }
        if (System.getProperty("serverXsdFile") == null) {
            usage("serverXsdFile has to be specified in the system properties");
        }
        if (System.getProperty("rootPackage") == null) {
            usage("rootPackage has to be specified in the system properties");
        }
        if (System.getProperty("handlerPackage") == null) {
            usage("handlerPackage has to be specified in the system properties");
        }
        
        I18N.setResourceName("com.sun.honeycomb.mof.Compiler");

        try {
            CIMCompiler compiler = new CIMCompiler(new FileInputStream(file));
            compiler.init();
            compiler.mofSpecification();
            compiler.postProcessing();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        } catch (ParseException e) {
            e.printStackTrace();
            System.exit(1);
        } catch (CIMException e) {
            if (e.getDescription() != null)
                System.out.println(e.getDescription());
            e.printStackTrace();
            System.exit(1);
        }
    }
        
    public void init() {
        comp = new CompilerBackend(this);
    }

    public int getCurrentLine() {
        int a = jj_input_stream.getEndLine();
        return (a - comp.lineno);
    }

    private String parseString(String s) {
        String t = s.substring(1, s.length()-1);
        int i = t.length();
        StringBuffer b = new StringBuffer();
        for(int j=0; j < i; j++) {
            if(t.charAt(j) == '\\') {
                j++;
                switch(t.charAt(j)) {
                case 'n': b.append('\n');
                    break;
                case 't': b.append('\t');
                    break;
                case 'b': b.append('\b');
                    break;
                case 'r': b.append('\r');
                    break;
                case 'f': b.append('\f');
                    break;
                case '\\': b.append('\\');
                    break;
                case '\'': b.append('\'');
                    break;
                case '"': b.append('"');
                    break;
                default : throw new IllegalArgumentException(s);
                }
            } else {
                b.append(t.charAt(j));
            }
        }
        return b.toString();
    }

    private char parseCharacter(String s) {
        String t = s.substring(1, s.length()-1);
        if(t.charAt(0) == '\\') {
            switch(t.charAt(1)) {
            case 'n': return('\n');
            case 't': return('\t');
            case 'b': return('\b');
            case 'r': return('\r');
            case 'f': return('\f');
            case '\\': return('\\');
            case '\'': return('\'');
            case '"': return('"');
            default : throw new IllegalArgumentException(s);
            }
        } else {
            return(t.charAt(0));
        }
    }

    private void postProcessing() 
        throws CIMException, IOException {
        
        KeyCache.getInstance().load(comp);

        XsdGenerator xsdGen = null;
        try {
            xsdGen = new XsdGenerator(System.getProperty("clientXsdFile"), true);
            xsdGen.generate(comp);
        } finally {
            if (xsdGen != null) xsdGen.close();
        }
        try {
            xsdGen = new XsdGenerator(System.getProperty("serverXsdFile"), false);
            xsdGen.generate(comp);
        } finally {
            if (xsdGen != null) xsdGen.close();
        }
        ClientClassGenerator clientGenerator = new ClientClassGenerator();
        clientGenerator.generate(comp);
        ServerClassGenerator serverGenerator = new ServerClassGenerator();
        serverGenerator.generate(comp);
    }
}

PARSER_END(CIMCompiler)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\r"
| "\n"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN :  /* Precompiler generated tokens */
{
  <PRECOMP_LINE: "##LINE" (" "|"\t"|"\n"|"\r"|"\r\n")>
| <PRECOMP_FILE: "##FILE" (" "|"\t"|"\n"|"\r"|"\r\n")>
}

TOKEN [IGNORE_CASE] :
{
  <PRAGMA: "#pragma" (" "|"\t"|"\n"|"\r"|"\r\n")>
|  <NAMESPACE: "namespace">
|  <SCHEMA: "schema">
|  <INCLUDE: "include">
|  <SOURCE: "source">
|  <LOCALE: "locale">
|  <NONLOCALE: "nonlocale"> 
|  <INSTANCELOCALE: "instancelocale"> 
|  <CLASS: "class"> 
|  <ASSOCIATION: "association"> 
|  <INDICATION: "indication"> 
|  <PROPERTY: "property"> 
|  <REFERENCE: "reference"> 
|  <METHOD: "method"> 
|  <PARAMETER: "parameter"> 
|  <ANY: "any"> 
|  <REF: "ref"> 
|  <INSTANCE: "instance">
|  <OF: "of"> 
|  <AS: "as"> 
|  <QUALIFIER: "qualifier"> 
|  <SCOPE: "scope"> 
|  <FLAVOR: "flavor"> 
|  <ENABLEOVERRIDE: "enableoverride">
|  <DISABLEOVERRIDE: "disableoverride"> 
|  <TOSUBCLASS:  "tosubclass">
|  <RESTRICTED:  "restricted">
|  <TRANSLATABLE:  "translatable">
|  <DT_UINT8:  "uint8">
|  <DT_SINT8:  "sint8">
|  <DT_UINT16:  "uint16">
|  <DT_SINT16:  "sint16">
|  <DT_UINT32:  "uint32">
|  <DT_SINT32:  "sint32">
|  <DT_UINT64:  "uint64">
|  <DT_SINT64:  "sint64">
|  <DT_REAL32:  "real32">
|  <DT_REAL64:  "real64">
|  <DT_CHAR16:  "char16">
|  <DT_STR:  "string">
|  <DT_BOOL:  "boolean">
|  <DT_DATETIME:  "datetime">
|  <DT_XML:  "xml">
|  <TRUE_VALUE:  "true">
|  <FALSE_VALUE:  "false">
|  <NULL_VALUE:  "null">
}

TOKEN :
{
  <BINARY_VALUE: (["-","+"])? (["0","1"])+ ("b"|"B")>
| <OCTAL_VALUE: (["-","+"])? "0" (["0"-"7"])+>
| <POS_DECIMAL_VALUE: ("+")? (["1"-"9"]) (["0"-"9"])*>
| <NEG_DECIMAL_VALUE: "-" (["1"-"9"]) (["0"-"9"])*>
| <ZERO: (["-","+"])? "0">
| <HEX_VALUE: (["-","+"])? "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
| <REAL_VALUE: (["+","-"])? (["0"-"9"])* "." (["0"-"9"])+ (["e","E"] (["+","-"])? (["0"-"9"])+)?>
|
  < STRING_VALUE:
      "\""
//      (   (~["\"","\\","\n","\r"])
      (   (~["\"","\n","\r"])
        | ("\\" ["n","t","b","r","f","\\","'","\""])
      )*
      "\""
  >
| < CHAR_VALUE:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\" ["n","t","b","r","f","\\","'","\""])
      )
      "'"
  >
}

TOKEN :
{
  <IDENTIFIER: <IDENT_CHAR> (<IDENT_CHAR>|["0"-"9"])*> 
| <ALIAS_IDENTIFIER: "$" <IDENT_CHAR> (<IDENT_CHAR>|["0"-"9"])*> 
| <#IDENT_CHAR: ["a"-"z","A"-"Z","_"]>
}

TOKEN : 
{
  < COMMA: "," >
| < COLON: ":" >
| < SEMICOLON: ";" >
| < EQUAL: "=" >
| < OPEN_CUR_BRA: "{" >
| < CLOSE_CUR_BRA: "}" >
| < OPEN_SQU_BRA: "[" >
| < CLOSE_SQU_BRA: "]" >
| < OPEN_BRA: "(" >
| < CLOSE_BRA: ")" >
}

/*
// ------------------------------------------------------------------------
// MOF Specification: This production parses the specification. Each of
// the subproductions populate the appropriate element associated with it
// in an instance (comp) of MofcompBackend. For e.g. if the subproduction
// is for className, then it populates comp.curClassEl's name. Finally
// when the entire class has been parsed successfully, the class can be
// added using the information accumulated in curClassEl.
// ------------------------------------------------------------------------
*/

void mofSpecification() throws CIMException:
{}
{
    try {
        (
         mofProductions()
         )?
            <EOF>
            }
    catch(ParseException e) {
        System.err.println(I18N.loadStringFormat("ERROR_LINE", comp.filename, 
                                                 new Integer(getCurrentLine())));
        throw e;
    }
}

void mofProductions() throws CIMException :
{}
{
    (mofProduction())+
        }

void mofProduction() throws CIMException :
{}
{
    compilerDirective()
        | precompilerDirective() 
        // Doing left factoring for LL(1)
        | [qualifierList ()]
        (classDeclaration() | instanceDeclaration())
        | qualifierTypeDeclaration()
        }

/*
// ------------------------------------------------------------------------
// PreCompiler Directive
// ------------------------------------------------------------------------
*/

void precompilerDirective() :
{Token t;}
{
    <PRECOMP_LINE>
         (t = <POS_DECIMAL_VALUE> | t = <ZERO>)
        {
            comp.lineno = t.endLine-Integer.parseInt(t.image);
        }
    | <PRECOMP_FILE>
           t = <STRING_VALUE>
        {    
            //Removed the parse from this line
            comp.filename = t.image;
            comp.lineno = t.endLine;
        }
}

/*
// ------------------------------------------------------------------------
// CompilerDirectives
// ------------------------------------------------------------------------
*/
void compilerDirective() throws CIMException :
{}
{
    <PRAGMA>
         (
          namespacePragma()
          | sourcePragma()
          | localePragma()
          | nonlocalePragma()
          | instancelocalePragma()
          )

         }

void namespacePragma() throws CIMException :
{Token t;}
{
    <NAMESPACE>
         <OPEN_BRA>
         // CHANGED
         t = <STRING_VALUE>
         <CLOSE_BRA>
        {
            comp.switchNamespace(parseString(t.image));
        }
}

void sourcePragma() :
{}
{
    <SOURCE>
         <OPEN_BRA>
         multiStringValue()
         <CLOSE_BRA>
         }

void localePragma() :
{}
{
    <LOCALE>
         <OPEN_BRA>
         multiStringValue()
         <CLOSE_BRA>
         }

void nonlocalePragma() :
{}
{
    <NONLOCALE>
         <OPEN_BRA>
         multiStringValue()
         <CLOSE_BRA>
         }

void instancelocalePragma() :
{}
{
    <INSTANCELOCALE>
         <OPEN_BRA>
         multiStringValue()
         <CLOSE_BRA>
         }

String nameToken() :
{Token t;}
{
    (
     t = <IDENTIFIER>
     | t = <SCHEMA>
     | t = <ASSOCIATION>
     | t = <INDICATION>
     | t = <REFERENCE>
     | t = <LOCALE>
     | t = <SOURCE>
     )
        {return t.image;}
}

/*
// ------------------------------------------------------------------------
// Qualifier Type Declaration
// (set qualifierTypes)
// (Unit)
// ------------------------------------------------------------------------
*/
void qualifierTypeDeclaration() throws CIMException : 
{}
{

    qualifierTypeHead()
        qualifierTypeBody()
        qualifierTypeTail()

        }

void qualifierTypeHead(): 
{}
{
    <QUALIFIER>
        {
            comp.curLevel= "QUALIFIER";
        }
}

void qualifierTypeBody() throws CIMException : 
{}
{
    qualifierTypeName()
        qualifierTypeDataType()
        qualifierTypeArray_Init()
        qualifierTypeScope()
        qualifierTypeFlavor()
        }

void qualifierTypeTail() throws CIMException : 
{}
{
    <SEMICOLON>
        {
            comp.addQualifierType();
            //comp.curLevel="";
            comp.erroneousUnit=false;
            comp.erroneousPart=false;
        }
}

void qualifierTypeName(): 
{String s;}
{
    s = nameToken()
        {
            comp.curQualifierTypeEl.setName(s);
        }
}

void qualifierTypeDataType() : 
{}
{
    <COLON>
         dataType()
         }

void qualifierTypeArray_Init() throws CIMException : 
{}
{
    qualifierTypeArray_ArrayInit()
        | qualifierTypeSimpleInit()
        }

void qualifierTypeArray_ArrayInit() throws CIMException : 
{}
{
    array()
        {
            int simpleType = comp.curType.getType();
            // Create a new array data type.
            comp.curType = new CIMDataType(CIMDataType.findArrayType(simpleType),
                                           comp.size);
            comp.curQualifierTypeEl.setType(comp.curType);
        }
    [
     <EQUAL>
     arrayInitializer()
    {
        if (!comp.erroneousPart) { 
            if(!comp.curValues.isEmpty()) {
                CIMValue cv = new CIMValue(comp.curValues.vVector);
                comp.curQualifierTypeEl.setDefaultValue(cv);
            }
        }
        comp.curValues = new MofcCIMValue();
    }
     ]
        }

void qualifierTypeSimpleInit() throws CIMException : 
{}
{
    <EQUAL>
         simpleInitializer()
        {
            comp.curQualifierTypeEl.setType(comp.curType);
            // simpleInitializer populated comp.curValues
            if (!comp.erroneousPart) { 
                if(!comp.curValues.isEmpty()) {
                    Object o = comp.curValues.vVector.firstElement();
                    comp.curQualifierTypeEl.setDefaultValue(new CIMValue(o));
                }
            }
            comp.curValues = new MofcCIMValue();
        }
    | /* empty */
        {
            comp.curQualifierTypeEl.setType(comp.curType);
        }
}

void qualifierTypeScope() throws CIMException: 
{}
{
    <COMMA>
         <SCOPE>
         <OPEN_BRA>
         ScopeMetaElementList()
         <CLOSE_BRA>
         }

void ScopeMetaElementList() throws CIMException:
{CIMScope s;}
{
    s = ScopeMetaElement()
        {
            comp.assignQualifierTypeScope(s);
        }
    (
     <COMMA>
     s = ScopeMetaElement()
        {
            comp.assignQualifierTypeScope(s);
        }
     )*
        }

CIMScope ScopeMetaElement() :
{
    Token t;
    int scope;
}
{
    (
     t = <SCHEMA>
        { scope = CIMScope.SCHEMA; }
     | t = <CLASS>
        { scope = CIMScope.CLASS; }
     | t = <ASSOCIATION>
        { scope = CIMScope.ASSOCIATION; }
     | t = <INDICATION>
        { scope = CIMScope.INDICATION; }
     | t = <PROPERTY>
        { scope = CIMScope.PROPERTY; }
     | t = <REFERENCE>
        { scope = CIMScope.REFERENCE; }
     | t = <METHOD>
        { scope = CIMScope.METHOD; }
     | t = <PARAMETER>
        { scope = CIMScope.PARAMETER; }
     | t = <ANY>
        { scope = CIMScope.ANY; }
     )
        { return new CIMScope(scope); }
}

void qualifierTypeFlavor() throws CIMException: 
{}
{
    <COMMA>
         <FLAVOR>
         <OPEN_BRA>
         qualifierTypeFlavorList()
         <CLOSE_BRA>
        {
            // comp.assignQualifierTypeDefaultFlavor();
        }
    | /* empty */
        {
            // comp.assignQualifierTypeDefaultFlavor();
        }
}

void qualifierTypeFlavorList() throws CIMException: 
{CIMFlavor s;}
{
    s = flavor()
        {
            comp.assignQualifierTypeFlavor(s);
        }
    (
     <COMMA>
     s = flavor()
        {
            comp.assignQualifierTypeFlavor(s);
        }
     )*
        }

CIMFlavor flavor() : 
{
    int flavor;
    Token t;
}
{
    (
     t = <ENABLEOVERRIDE>
        { flavor = CIMFlavor.ENABLEOVERRIDE; }
     | t = <DISABLEOVERRIDE>
        { flavor = CIMFlavor.DISABLEOVERRIDE; }
     | t = <RESTRICTED>
        { flavor = CIMFlavor.RESTRICTED; }
     | t = <TOSUBCLASS>
        { flavor = CIMFlavor.TOSUBCLASS; }
     | t = <TRANSLATABLE>
        { flavor = CIMFlavor.TRANSLATE; }
     )
        {return new CIMFlavor(flavor);}
}

/*
// ------------------------------------------------------------------------
// Qualifier List
// (set comp.qualifiers)
// (Part)
// ------------------------------------------------------------------------
*/
void qualifierList() throws CIMException :
{}
{
    qualifierListHead()
        qualifierListBody()
        qualifierListTail()
        }

void qualifierListHead() : 
{}
{
    <OPEN_SQU_BRA>
        {
            comp.curLevel= "QUALIFIERLIST";
            comp.erroneousQualifierList=false;
            comp.qualifiers = new Vector();
        }
}

void qualifierListBody() throws CIMException : 
{}
{
    qualifier()
        {
            comp.addQualifier();
        }
    (
     <COMMA>
     qualifier()
    {
        comp.addQualifier();
    }
     )*
        }

void qualifierListTail() throws CIMException : 
{}
{
    <CLOSE_SQU_BRA>
        {
            comp.checkQualifierList();
            //comp.curLevel="";
        }
}

void qualifier() throws CIMException :
{}
{
    qualifierName()
        qualifierParameter()
        [qualifierFlavor()]
        }

void qualifierName() :
{String s;}
{
    s = nameToken()
        {
            comp.assignQualifierNameType(s);
        }
}

void qualifierParameter() throws CIMException :
{}
{
    <OPEN_BRA>
         simpleInitializer()
         <CLOSE_BRA>
        {
            comp.assignQualifierParameter(false);
        }
    | arrayInitializer()
        {
            //comp.checkArraySize(comp.curQualifierEl.getName());
            comp.assignQualifierParameter(true);
        }
    | /* empty */
        {
            comp.curValues = new MofcCIMValue();
            comp.assignQualifierParameter(false);
        }
}

void qualifierFlavor() :
{}
{
    <COLON>
         qualifierFlavorList()
         }

void qualifierFlavorList() :
{CIMFlavor s;}
{
    (
     s = flavor()
        {
            comp.assignQualifierFlavor(s);
        }
     )+
        }

/*
// ------------------------------------------------------------------------
// Class Declaration
// (set classes, classAliases)
// (Unit)
// ------------------------------------------------------------------------
*/
void classDeclaration() throws CIMException :
{}
{
    classHead()
        classBody()
        classTail()
        }

void classHead() throws CIMException :
{}
{
    <CLASS>
         className()
         [classAlias()]
         [classSuperClassName()]
        {
            comp.curLevel= "CLASS";
            if (comp.erroneousQualifierList) {
                comp.erroneousUnit=true;
                comp.qualifiers = new Vector();
                comp.reportError("ERR_SEM", "ERR_QUALIFIER_LIST_STR", 1, 
                                 comp.curClassEl.getName());
            } else
                comp.assignClassQualifiers();
        }
}

void classBody() throws CIMException :
{}
{
    <OPEN_CUR_BRA>
         classFeatureList()
         <CLOSE_CUR_BRA>
         }

void classTail() throws CIMException :
{}
{
    <SEMICOLON>
        {
            comp.addClass();
            //comp.curLevel="";
            comp.erroneousUnit=false;
            comp.erroneousPart=false;
        }
}

void className() throws CIMException :
{Token t;}
{
    t = <IDENTIFIER>
        {
            comp.assignClassName(t.image);
        }
}

void classAlias() :
{Token t;}
{
    <AS> 
         t = <ALIAS_IDENTIFIER>
        {
            comp.assignClassAlias(t.image);
        }
}

void classSuperClassName() :
{Token t;}
{
    <COLON>
         t = <IDENTIFIER>
        {
            comp.assignSuperclassName(t.image);
        }
}

void classFeatureList() throws CIMException :
{}
{
    (classFeature())*
        }

void classFeature() throws CIMException :
{}
{
    LOOKAHEAD(propertyDeclaration())
        propertyDeclaration()
        | LOOKAHEAD(methodDeclaration())
        methodDeclaration()
        | 
        referenceDeclaration()
        }

/*
// ------------------------------------------------------------------------
// Property Declaration
// (set properties)
// (Part)
// ------------------------------------------------------------------------
*/
void propertyDeclaration() throws CIMException : 
{}
{
    propertyHead()
        propertyBody()
        propertyTail()
        | qualifierList()
        propertyHead()
        propertyBody()
        propertyTail()
        }

void propertyHead() throws CIMException :
{}
{
    dataType()
        propertyName()
        {
            comp.curLevel= "PROPERTY";
            if (comp.erroneousQualifierList) {
                comp.erroneousUnit=true;
                comp.qualifiers = new Vector();
                comp.reportError("ERR_SEM", "ERR_QUALIFIER_LIST_STR", 1, 
                                 comp.curPropRefEl.getName());
            } else
                comp.assignPropertyQualifiers();
        }
}

void propertyBody() throws CIMException : 
{}
{
    propertyArray_ArrayInit()
        | propertySimpleInit()
        }

void propertyArray_ArrayInit() throws CIMException : 
{}
{
    array()
        {
            int simpleType = comp.curType.getType();
            // Create a new array data type.
            comp.curType = new CIMDataType(CIMDataType.findArrayType(simpleType),
                                           comp.size);
            comp.curPropRefEl.setType(comp.curType);
        }
    [
     <EQUAL>
     arrayInitializer()
    {
        if (!comp.erroneousPart) { 
            if(!comp.curValues.isEmpty()) {
                CIMValue cv = new CIMValue(comp.curValues.vVector);
                comp.curPropRefEl.setValue(cv);
            }
        }
        comp.curValues = new MofcCIMValue();
    }
     ]
        }

void propertySimpleInit() throws CIMException : 
{}
{
    <EQUAL>
         simpleInitializer()
        {
            comp.curPropRefEl.setType(comp.curType);
            if (!comp.erroneousPart) { 
                if(!comp.curValues.isEmpty()) {
                    Object o = comp.curValues.vVector.firstElement();
                    comp.curPropRefEl.setValue(new CIMValue(o));
                }
            }
            comp.curValues = new MofcCIMValue();
        }
    | /* empty */
        {
            //do nothing
            comp.curPropRefEl.setType(comp.curType);
        }
}

void propertyTail() : 
{}
{
    <SEMICOLON>
        {
            comp.addProperty();
            //comp.curLevel="";
            comp.erroneousPart=false;
        }
}

void propertyName() throws CIMException :
{String s;}
{
    s = nameToken()
        {
            comp.assignFeatureName(s);
        }
}

/*
// ------------------------------------------------------------------------
// Reference Declaration
// (set properties)
// (Part)
// ------------------------------------------------------------------------
*/
void referenceDeclaration() throws CIMException : 
{}
{
    referenceHead()
        referenceBody()
        referenceTail()
        | qualifierList()
        referenceHead()
        referenceBody()
        referenceTail()
        }

void referenceHead() throws CIMException : 
{}
{
    referenceObject()
        referenceName()
        { 
            comp.curLevel = "REFERENCE";
            if (comp.erroneousQualifierList) {
                comp.erroneousUnit=true;
                comp.qualifiers = new Vector();
                comp.reportError("ERR_SEM", "ERR_QUALIFIER_LIST_STR", 1,
                                 comp.curPropRefEl.getName());
            } else
                comp.assignReferenceQualifiers();
        }
}

void referenceBody() throws CIMException : 
{}
{
     referenceArray_ArrayInit() |
        referenceInitializer()
        }


void referenceArray_ArrayInit() throws CIMException : 
{}
{
    array()
        {
            int simpleType = comp.curType.getType();
            // Create a new array data type.
            comp.curType = new CIMDataType(comp.curType.getRefClassName(),
                                           comp.size);  
            comp.curPropRefEl.setType(comp.curType);
        }
    [
     <EQUAL>
     arrayInitializer()
    {
        if (!comp.erroneousPart) { 
            if(!comp.curValues.isEmpty()) {
                CIMValue cv = new CIMValue(comp.curValues.vVector);
                comp.curPropRefEl.setValue(cv);
            }
        }
        comp.curValues = new MofcCIMValue();
    }
     ]
        }


void referenceTail() : 
{}
{
    <SEMICOLON>
        {
            comp.addReference();
            //comp.curLevel="";
            comp.erroneousPart=false;
        }
}

void referenceName() throws CIMException : 
{String s;}
{
    s = nameToken()
        {
            comp.assignFeatureName(s);
        }
}

void referenceObject() :		
{}
{
    objectRef()
        {
            comp.assignRefClassName(comp.curType);
        }
}

void referenceInitializer() throws CIMException : 
{
    Token t;
    String s;
    CIMValue cv;
}
{
    t = <ALIAS_IDENTIFIER>
        {
            comp.curValues.addElement(comp.getInstanceName(t.image));
            comp.curValues.setIsArrayValue(false);
            cv = new CIMValue(comp.curValues.firstElement());
            comp.curPropRefEl.setValue(cv);
            comp.curValues = new MofcCIMValue();
        }
    | s = objectPath()
        {
            comp.curValues.addElement(new String(s));
            comp.curValues.setIsArrayValue(false);
            cv = new CIMValue(comp.curValues.firstElement());
            comp.curPropRefEl.setValue(cv);
            comp.curValues = new MofcCIMValue();
        }
    | /* empty */
        {
            //do nothing
        }
}

/*
// ------------------------------------------------------------------------
// Method Declaration
// (set methods)
// (Part)
// ------------------------------------------------------------------------
*/
void methodDeclaration() throws CIMException : 
{}
{
    methodHead()
        methodBody()
        methodTail()
        | qualifierList()
        methodHead()
        methodBody()
        methodTail()
        }

void methodHead() throws CIMException : 
{}
{
    dataType()
        methodName()
        {
            comp.curLevel = "METHOD";
            comp.curMethodEl.setType(comp.curType);
            if (comp.erroneousQualifierList) {
                comp.erroneousUnit=true;
                comp.qualifiers = new Vector();
                comp.reportError("ERR_SEM", "ERR_QUALIFIER_LIST_STR", 1,
                                 comp.curMethodEl.getName());
            } else
                comp.assignMethodQualifiers();
        }
}

void methodBody() throws CIMException : 
{}
{
    LOOKAHEAD(2)
        <OPEN_BRA>
        methodParameterList()
        <CLOSE_BRA>
        {
            comp.assignMethodParameters();
        }
    | <OPEN_BRA>
           <CLOSE_BRA>
           }

void methodTail() :
{}
{
    <SEMICOLON>
        {
            comp.addMethod();
            //comp.curLevel="";
            comp.erroneousPart=false;
        }
}

void methodName() throws CIMException : 
{String s;}
{
    s = nameToken()
        {
//            System.err.println("STEPH method name = " + s);
            comp.assignFeatureName(s);
        }
}

void methodParameterList() throws CIMException :
{}
{
    parameter()
        {
            comp.addParameter();
        }
    (
     <COMMA>
     parameter()
    {
        comp.addParameter();
    }
     )*
        }

/*
// ------------------------------------------------------------------------
// MethodParameter Declaration
// (set parameters)
// (Part)
// ------------------------------------------------------------------------
*/
void parameter() throws CIMException :
{}
{
    parameterHead()
        [parameterBody()]
        parameterTail()
        | qualifierList()
        parameterHead()
        [parameterBody()]
        parameterTail()
        }

void parameterHead() throws CIMException :
{}
{
    parameterDataType()
        parameterName()
        {
            comp.curLevel = "PARAMETER";
            if (comp.erroneousQualifierList) {
                comp.erroneousUnit=true;
                comp.qualifiers = new Vector();
                comp.reportError("ERR_SEM", "ERR_QUALIFIER_LIST_STR", 1, 
                                 comp.curParameterEl.getName());
            } else
                comp.assignParameterQualifiers();
        }
}

void parameterBody() throws CIMException :
{}
{
    array()
        {
            int simpleType = comp.curType.getType();
            if(simpleType == CIMDataType.REFERENCE) {
//                System.err.println("STEPH parameterBody(), array() ");

                comp.curType = new CIMDataType(comp.curType.getRefClassName(),
                                                   comp.size);  
                comp.curParameterEl.setType(comp.curType);
            }
            else {
                comp.curType = new CIMDataType(CIMDataType.findArrayType(simpleType),
                                               comp.size);
                comp.curParameterEl.setType(comp.curType);
            }
        }
}

void parameterTail() :
{}
{
    /* empty */
    {
        //comp.curLevel="";
    }
}

void parameterDataType() :
{}
{
    dataType()
        {
//            System.err.println("STEPH : dataType()");
            comp.curParameterEl.setType(comp.curType);
        }
    | objectRef()
        {
//            System.err.println("STEPH : objectRef()");
            comp.curParameterEl.setType(comp.curType);
        }
}

void parameterName() throws CIMException :
{String s;}
{
    s = nameToken()
        {
//            System.err.println("STEPH : name " + s);
            comp.assignParameterName(s);
        }
}

/*
// ------------------------------------------------------------------------
// Instance Declaration
// (set instances)
// (Unit)
// ------------------------------------------------------------------------
*/
void instanceDeclaration() throws CIMException :
{}
{
    instanceHead()
        instanceBody()
        instanceTail()
        }

void instanceHead() throws CIMException :
{}
{
    <INSTANCE>
         <OF>
         instanceClassName()
         [instanceAlias()]
        {
            comp.curLevel = "INSTANCE";
            if (comp.erroneousQualifierList) {
                comp.erroneousUnit=true;
                comp.reportError("ERR_SEM", "ERR_QUALIFIER_LIST_STR", 1,
                                 comp.curInstanceEl.getName());
            } else
                comp.assignInstanceQualifiers();
        }
}

void instanceBody() throws CIMException :
{}
{
    <OPEN_CUR_BRA>
         instancePropertyList()
         <CLOSE_CUR_BRA>
         }

void instanceTail() throws CIMException :
{}
{
    <SEMICOLON>
        {
            comp.addInstance();
            //comp.curLevel="";
            comp.erroneousUnit=false;
            comp.erroneousPart=false;
        }
}

void instanceClassName() :
{Token t;}
{
    t = <IDENTIFIER>
        {
            comp.assignInstanceClass(t.image);
        }
}

void instanceAlias() :
{Token t;}
{
    <AS>
         t = <ALIAS_IDENTIFIER>
        {
            comp.assignInstanceAlias(t.image);
        }
}

void instancePropertyList() throws CIMException :
{}
{
    (instanceProperty())+
        }

void instanceProperty() throws CIMException :
{}
{
    instancePropertyBody()
        | qualifierList()
        instancePropertyBody()
        }

void instancePropertyBody() throws CIMException :
{Token t;}
{
    t = <IDENTIFIER>
        {
            comp.curLevel= "INSTANCEPROPERTY";
            comp.curIPropertyEl.setName(t.image);

            if(!comp.erroneousUnit) {
                if (comp.erroneousQualifierList) {
                    comp.reportError("ERR_SEM", "ERR_QUALIFIER_LIST_STR", 1, 
                                     comp.curPropRefEl.getName());
                } else
                    comp.assignInstancePropertyQualifiers();
            }
        }
    <EQUAL>
         initializer()
        {
            comp.addInstanceProperty();
            comp.erroneousPart=false;
        }
    <SEMICOLON>
         }

/*
// ------------------------------------------------------------------------
// Data Type Declaration
// (set size , curType)
// (Part)
// ------------------------------------------------------------------------
*/
void objectRef() :
{Token t;}
{
    t = <IDENTIFIER>
        <REF>
        {
            comp.curType=new CIMDataType(t.image);
            comp.size=CIMDataType.SIZE_SINGLE;
        }
}

String objectPath() :
{String s;}
{
    s = multiStringValue()
        {return s;}
}

void array() : 
{Token t;}
{
    <OPEN_SQU_BRA>
        {
            comp.size=CIMDataType.SIZE_UNLIMITED; 
        }
    [
     t = <POS_DECIMAL_VALUE>
        {
            comp.size=Integer.parseInt(t.image);
        }
     ]
        <CLOSE_SQU_BRA>
        }

void dataType() :
{}
{
    intDataType()
    | realDataType()
    | xmlDataType()
    | <DT_CHAR16>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType= new CIMDataType(CIMDataType.CHAR16);
        }
    | <DT_STR>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType=new CIMDataType(CIMDataType.STRING);
        }
    | <DT_BOOL>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType=new CIMDataType(CIMDataType.BOOLEAN);
        }
    | <DT_DATETIME>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType=new CIMDataType(CIMDataType.DATETIME);
        }
}

void xmlDataType() :
{}
{
    <DT_XML>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType=new CIMDataType(CIMDataType.XML);
        }
}

void intDataType() :
{}
{
    <DT_UINT8>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType=new CIMDataType(CIMDataType.UINT8);
        }
    | <DT_SINT8>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType=new CIMDataType(CIMDataType.SINT8);
        }
    | <DT_UINT16>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType=new CIMDataType(CIMDataType.UINT16);
        }
    | <DT_SINT16>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType=new CIMDataType(CIMDataType.SINT16);
        }
    | <DT_UINT32>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType=new CIMDataType(CIMDataType.UINT32);
        }
    | <DT_SINT32>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType=new CIMDataType(CIMDataType.SINT32);
        }
    | <DT_UINT64>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType=new CIMDataType(CIMDataType.UINT64);
        }
    | <DT_SINT64>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType=new CIMDataType(CIMDataType.SINT64);
        }
}

void realDataType() :
{}
{
    <DT_REAL32>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType=new CIMDataType(CIMDataType.REAL32);
        }
    | <DT_REAL64>
        {
            comp.size=CIMDataType.SIZE_SINGLE;
            comp.curType=new CIMDataType(CIMDataType.REAL64);
        }
}

/*
// ------------------------------------------------------------------------
// Default + Initialzer Declaration
// (set curValues, curValueType)
// (Part)
// ------------------------------------------------------------------------
*/
void initializer() throws CIMException :
{}
{
    simpleInitializer()
        {
            if (!comp.erroneousPart) { 
                Object o = comp.curValues.vVector.firstElement();
                comp.curIPropertyEl.setValue(new CIMValue(o));
            }
            comp.curValues = new MofcCIMValue();
        }
    | arrayInitializer()
        { 
            if(!comp.erroneousPart) {
                Vector v = comp.curValues.vVector;
                comp.curIPropertyEl.setValue(new CIMValue(v));
            }
            comp.curValues = new MofcCIMValue();
        }
}

void arrayInitializer() throws CIMException :
{}
{
    <OPEN_CUR_BRA>
         simpleInitializerList()
         <CLOSE_CUR_BRA>
        {
            comp.curValues.setIsArrayValue(true);
        }
}

void simpleInitializerList() throws CIMException :
{}
{
    simpleInitializer()
        (
         <COMMA>
         simpleInitializer()
         )*
        }

void simpleInitializer() throws CIMException :
{}
{
    constantValue()
        {
            comp.curValues.setIsArrayValue(false);
            // comp.check_Type_ValueType();
        }
}

void constantValue() throws CIMException :
{String s;
Token t;}
{
    s = integerValue()
        {
            if(s.charAt(0) == '-')
            comp.curValues.addElement(new Long(s));
            else
            comp.curValues.addElement(new UnsignedInt64(s));
            comp.curValueType="INT";
        }
    | t = <REAL_VALUE>
        {
            comp.curValues.addElement(new Double(t.image));
            comp.curValueType="REAL";
        }
    | t = <CHAR_VALUE>
        {
            Character ch = new Character(parseCharacter(t.image));
            comp.curValues.addElement(ch);
            comp.curValueType="CHAR";
        }
    | s = multiStringValue()
        {
            comp.curValues.addElement(s);
            comp.curValueType="STRING";
        }
    | s = booleanValue()
        {
            comp.curValues.addElement(new Boolean(s));
            comp.curValueType="BOOLEAN";
        }
    | t = <NULL_VALUE>
        {
            comp.curValues.addElement(null);
            comp.curValueType="ANY";
        }
    // CHANGED Added this to allow initializing references to aliases
    | t = <ALIAS_IDENTIFIER>
        {
            comp.curValues.addElement(comp.getInstanceName(t.image));
            comp.curValueType="ALIAS";
        }
}

String integerValue() :
{Token t;
String s;}
{
    t = <BINARY_VALUE>
        {return t.image;}
    | t =<OCTAL_VALUE>
        {return t.image;}
    | s = decimalValue()
        {return s;}
    | t = <HEX_VALUE>
        {return t.image;}
}

String decimalValue() :
{Token t;}
{
    (
     t = <POS_DECIMAL_VALUE>
     | t = <ZERO>
     | t = <NEG_DECIMAL_VALUE>
     )
        {return t.image;}
}

String multiStringValue() :
{Token t;
String s = "";
}
{
    (
     t = <STRING_VALUE>
        {
            s = s+parseString(t.image);
        }
     )+
        {return s ;}
}

String booleanValue() :
{Token t;}
{
    (
     t = <TRUE_VALUE>
     | t = <FALSE_VALUE>
     )
        {return t.image;}
}
